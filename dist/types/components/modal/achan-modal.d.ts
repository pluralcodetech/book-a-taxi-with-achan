interface roadtripType {
  firstName: string;
  surname: string;
  phoneNumber: string;
  emailAddress: string;
  from: string;
  destination: string;
  date: string;
  returnDate: string;
  time: string;
  returnTime: string;
  destinationAddress: string;
}
interface oneWayType {
  firstName: string;
  surname: string;
  phoneNumber: string;
  emailAddress: string;
  from: string;
  destination: string;
  date: string;
  time: string;
  destinationAddress: string;
}
export declare class AchhanModal {
  showTripsContent: boolean;
  showTitleText: boolean;
  showFormContent: boolean;
  bookingDetails: boolean;
  confirmBooking: boolean;
  cabTicket: boolean;
  driverDetails: boolean;
  loading: boolean;
  fromDropDown: any;
  storeFromDropDown: any;
  destinationState: any;
  googleApiLocation: any;
  storeGoogleApiLocation: any;
  roadTrip: roadtripType;
  onewayTrip: oneWayType;
  roadTripValid: boolean;
  estimatePrice: any;
  globalTrips: any;
  cabTicketDetails: any;
  driverDetailsState: any;
  secondDriverDetailsState: any;
  firstNameErrMsg: any;
  surnameErrMsg: any;
  phoneNumberErrMsg: any;
  emailAddressErrMsg: any;
  fromErrMsg: any;
  destinationErrMsg: any;
  dateErrMsg: any;
  returnDateErrMsg: any;
  timeErrMsg: any;
  returnTimeErrMsg: any;
  destinationAddressErrMsg: any;
  previousBtn: string;
  carIcon: string;
  callIcon: string;
  whatappIcon: string;
  opened: boolean;
  name: string;
  tripsDetails: any;
  watchStateHandler(newValue: any, oldValue: any): void;
  componentWillLoad(): void;
  callFromDataApi: (id: any) => Promise<void>;
  closeModal(): void;
  onContentChange(content: string): void;
  handlePlaceChange(event: any): void;
  onBookChange(): void;
  previousChange(): void;
  backToDriverDetails(): void;
  openConfirmBooking(): void;
  cabTicketChange(): void;
  openDriverDetails(): void;
  handleSecondSelect(event: any): void;
  handleChange(event: any): void;
  handleLocationChange(event: any): void;
  callDestinationDataApi: () => Promise<void>;
  callgoogleApiData: () => Promise<void>;
  callEstimatedDataApi: () => Promise<void>;
  callConfirmBookingApi: () => Promise<void>;
  sendTicketApi: () => Promise<void>;
  render(): any;
}
export {};
